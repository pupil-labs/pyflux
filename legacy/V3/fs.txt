#version 430 core
out vec4 FragColor;

in vec3 FragNormal;  
in vec3 FragPos; 
in vec3 color; 
in vec2 v_texture; 

uniform sampler2D s_texture;
  
uniform vec3 lightPos; 
uniform vec3 viewPos; 
uniform vec3 lightColor;

vec4 texcolor;

void main()
{

    // ambient
    float ambientStrength = 0.3;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    vec3 norm = normalize(FragNormal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;
    vec3 result = (ambient + diffuse + 0*specular) * color;
    FragColor = vec4(result, 1.0);    

    //FragColor = texture(s_texture, v_texture);

} 