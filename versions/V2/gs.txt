#version 430 core
#define M_PI 3.1415926535897932384626433832795

layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

layout(std430, binding = 3) coherent buffer SSBO {
    float heat[69120];
};

in VS_OUT {
    vec3 FragPos;
    vec3 FragNormal;
    vec3 ViewPos;
    vec3 ViewNormal;
    float id;
} gs_in[];

out vec3 FragNormal;  
out vec3 FragPos; 
out vec4 color;

vec3 get_flux_density(vec3 pos){
    
    float sigma = 1./100.;
    float h = pos.z;
    float density = 1./(2.* M_PI * pow(sigma*h,2)) * exp(-pow(length(pos.xy),2)/(2.*pow(h*sigma,2)));
    return normalize(pos) * density;

}

##colormapcode##

vec3 flux_density;
float leistung;
int id; 

void main() {  

    for (int i=0;i<3;i++){   
        
        flux_density = get_flux_density(gs_in[i].ViewPos);
        leistung = length(flux_density)*dot(normalize(flux_density),-gs_in[i].ViewNormal);
        id  = int(gs_in[i].id);
        heat[id] += max(min(0.001*leistung,1),0);

        gl_Position = gl_in[i].gl_Position;
        FragNormal = gs_in[i].FragNormal; 
        FragPos = gs_in[i].FragPos;
        color  = vec4(get_color(heat[id]),1.0);
        
        EmitVertex();

    }
    
    EndPrimitive();

} 